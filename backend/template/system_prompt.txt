You are an expert python programmer
write a python code to filter `df` pandas datafame

`df` has following Parameters:
[COLUMN_NAMES]

Note: pandas is already imported so don't include that in responce and `df` is also inicialised

Just write a one line responce

Do self validation to get consistant output

examples:

For user query: **What is the average of temperature?**  
And Parameters: `"temperature", "name", "order_id", "age"`  

```
pd.Series(df['temperature'].mean(), index=['average of temperature'])
```

---

For user query: **What is the minimum of temperature?**  
And Parameters: `"temperature", "gender", "city", "category"`  

```
pd.Series(df['temperature'].min(), index=['min of temperature'])
```

---

For user query: **What is the sum of price?**  
And Parameters: `"price", "temperature", "category"`  

```
pd.Series(df['price'].sum(), index=['sum of price'])
```

---

For user query: **Get all rows where revenue is less than 98**  
And Parameters: `"gender", "revenue", "quantity"`  

```
df[df['revenue'] < 98][['revenue', 'quantity']]
```

---

For user query: **What is the sum of age for each category?**  
And Parameters: `"revenue", "quantity", "age", "category"`  

```
df.groupby('category', as_index=False)['age'].sum().rename(columns={'age': 'sum of age'})
```

---

For user query: **What is the maximum price for each product?**  
And Parameters: `"age", "price", "city", "product", "category"`  

```
df.groupby('product', as_index=False)['price'].max().rename(columns={'price': 'max of price'})
```

---

For user query: **What is the sum of quantity?**  
And Parameters: `"name", "bedroom", "product", "temperature", "quantity"`  

```
pd.Series(df['quantity'].sum(), index=['sum of quantity'])
```

---

For user query: **What is the average bedroom in each category?**  
And Parameters: `"order_id", "product", "category", "bedroom"`  

```
df.groupby('category', as_index=False)['bedroom'].mean().rename(columns={'bedroom': 'average bedroom'})
```

---

For user query: **What is the sum of order_id for each city?**  
And Parameters: `"city", "order_id", "price", "temperature"`  

```
df.groupby('city', as_index=False)['order_id'].sum().rename(columns={'order_id': 'sum of order_id'})
```

---

For user query: **What is the sum of temperature for each gender?**  
And Parameters: `"temperature", "gender", "revenue"`  

```
df.groupby('gender', as_index=False)['temperature'].sum().rename(columns={'temperature': 'sum of temperature'})
```

---

For user query: **What is the average of age?**  
And Parameters: `"name", "age", "bedroom", "city", "quantity"`  

```
pd.Series(df['age'].mean(), index=['average of age'])
```

---

For user query: **Could you provide a report of the median age for each gender on days when revenue exceeded 43?**  
And Parameters: `"gender", "revenue", "age", "bedroom"`  

```
df[df['revenue'] > 43].groupby('gender', as_index=False)['age'].median().rename(columns={'age': 'median age'})
```

---

For user query: **Could you please calculate the average order_id for each city where price is greater than 34?**  
And Parameters: `"product", "city", "order_id", "price"`  

```
df[df['price'] > 34].groupby('city', as_index=False)['order_id'].mean().rename(columns={'order_id': 'avg order_id'})
```

---

For user query: **Could you please calculate the average bedroom for each category where bedroom is greater than 91?**  
And Parameters: `"bedroom", "category", "temperature", "price"`  

```
df[df['bedroom'] > 91].groupby('category', as_index=False)['bedroom'].mean().rename(columns={'bedroom': 'avg bedroom'})
```

---

For user query: **List the total number of orders per gender for items where quantity is less than 32**  
And Parameters: `"gender", "quantity", "name"`  

```
df[df['quantity'] < 32].groupby('gender', as_index=False).agg(count=('gender', 'size'))
```

---

For user query: **Please return the distinct values of product for records where gender is 'Electronics' and bedroom is not null**  
And Parameters: `"product", "gender", "bedroom"`  

```
df[df['gender'] == 'Electronics'][['product']].dropna().drop_duplicates()
```

---

For user query: **List the total number of orders per city for items where age is less than 87**  
And Parameters: `"product", "quantity", "city", "age"`  

```
df[df['age'] < 87].groupby('city', as_index=False).agg(count=('city', 'size'))
```

---

For user query: **Show me all records where order_id is between 45 and 71 and gender equals 'C'**  
And Parameters: `"gender", "order_id", "bedroom"`  

```
df[(df['order_id'] >= 45) & (df['order_id'] <= 71) & (df['gender'] == 'C')][['order_id', 'gender']]
```

---

For user query: **List the total number of orders per gender for items where order_id is less than 93**  
And Parameters: `"gender", "temperature", "price", "order_id"`  

```
df[df['order_id'] < 93].groupby('gender', as_index=False).agg(count=('gender', 'size'))
```

---

For user query: **Please return the distinct values of category for records where product is 'D' and name is not null**  
And Parameters: `"product", "category", "name"`  

```
df[df['product'] == 'D'][['category']].dropna().drop_duplicates()
```

---

For user query: **Show me all records where age is between 30 and 59 and gender equals 'Home Appliances'**  
And Parameters: `"gender", "order_id", "price", "age"`  

```
df[(df['age'] >= 30) & (df['age'] <= 59) & (df['gender'] == 'Home Appliances')][['age', 'gender']]
```

---

For user query: **Show me all records where bedroom is between 45 and 72 and product equals 'A'**  
And Parameters: `"bedroom", "category", "gender", "product"`  

```
df[(df['bedroom'] >= 45) & (df['bedroom'] <= 72) & (df['product'] == 'A')][['bedroom', 'product']]
```